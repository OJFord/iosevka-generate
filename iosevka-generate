#!/usr/bin/env python3
# pylint: disable=C0103,C0111

import configparser
import shutil
import subprocess
import sys
from pathlib import Path
from textwrap import dedent
from typing import Dict, Iterable, List, Optional, Set, Tuple

import inflection
from git import Repo
from xdg.BaseDirectory import xdg_cache_home, xdg_config_home, xdg_data_home

IOSEVKA_REPO = "https://github.com/be5invis/iosevka"
NERDFONT_REPO = "https://github.com/ryanoasis/nerd-fonts"


def get_repo(repo_dir: Path, remote_url: str) -> Repo:
    if repo_dir.exists():
        print(f"Updating {IOSEVKA_REPO} ...", file=sys.stderr)
        repo = Repo(repo_dir)
        repo.remote().pull()
    else:
        print(f"Cloning {remote_url} ...", file=sys.stderr)
        repo = Repo.clone_from(remote_url, repo_dir, depth=1)
    return repo


def install_iosevka(repo_dir: Path):
    get_repo(repo_dir, IOSEVKA_REPO)

    print("Installing iosevka...", file=sys.stderr)
    try:
        subprocess.run(["npm", "install"], cwd=repo_dir).check_returncode()
        subprocess.run(
            ["npm", "install", "--package-lock-only"],
            cwd=repo_dir,
        ).check_returncode()
        subprocess.run(["npm", "audit", "fix"], cwd=repo_dir).check_returncode()
    except subprocess.CalledProcessError:
        print("Failed to install iosevka", file=sys.stderr)
        sys.exit(1)
    else:
        print("Iosevka installed.", file=sys.stderr)


def generate_font_plan(
    iosevka_dir: Path,
    font_name: str,
    font_styles: Dict[str, Set[str]],
):
    family_name = f"Iosevka {inflection.titleize(font_name)}"
    print(f"Building font with family name: {family_name}")

    with open(iosevka_dir / "private-build-plans.toml", "w") as fp:
        conf = "\n".join(
            [
                f"[buildPlans.{font_name}]",
                f'serifs = "{" ".join(font_styles["serifs"])}"',
                f'family = "{font_name}"',
                "",
                f"[buildPlans.{font_name}.variants.design]",
                *font_styles["common"],
                "",
                f"[buildPlans.{font_name}.variants.upright]",
                *font_styles["upright"],
                "",
                f"[buildPlans.{font_name}.variants.italic]",
                *font_styles["italic"],
                "",
                f"[buildPlans.{font_name}.variants.oblique]",
                *font_styles["oblique"],
                "",
                f"[buildPlans.{font_name}.ligations]",
                f'inherits = "{" ".join(font_styles["ligations"])}"',
            ]
        )

        print(f"Building iosevka conf:\n{conf}", file=sys.stderr)
        fp.write(dedent(conf))


def generate_font(iosevka_dir: Path, font_name: str) -> None:
    subprocess.run(
        ["npm", "run", "build", "--", f"ttf::{font_name}"], cwd=iosevka_dir
    ).check_returncode()


def nerdfont_patch(
    font_dir: Path,
    repo_dir: Path,
    options: Iterable[str] = [],
    mono: bool = True,
) -> None:
    get_repo(repo_dir, NERDFONT_REPO)

    for font in filter(Path.is_file, font_dir.glob("*")):
        print(f"Patching {font} with nerdfont ...", file=sys.stderr)
        subprocess.run(
            [
                f"{repo_dir}/font-patcher",
                "--careful",
                "--progressbars",
                *(["--mono"] if mono else []),
                *map(lambda o: f"--{o}", options),
                font,
            ],
            cwd=font_dir,
        ).check_returncode()
        font.rename(f"{font}.unpatched")


def parse_config(config_file: Path) -> Tuple[str, Dict[str, Set[str]], Optional[List]]:
    print(f"Parsing iosevka-generate conf: {config_file} ...", file=sys.stderr)

    config = configparser.ConfigParser(
        allow_no_value=True, inline_comment_prefixes=(";")
    )
    config.read_dict({"options": {"name": "myosevka"}})

    sections = {"common", "upright", "italic", "oblique", "ligations", "serifs"}
    config.read_dict({s: {} for s in sections})
    config.read(config_file)

    font_styles = {
        section: {f'{char} = "{style}"' for char, style in config[section].items()}
        for section in sections
    }

    nerdfont: Optional[List] = None
    for option, value in config["options"].items():
        if option == "name":
            font_name = value
        elif option == "nerdfont":
            nerdfont = value.split(" ")
        elif option == "ligset":
            font_styles["ligations"].add(option)
        elif option == "serifs":
            font_styles["serifs"].add(option)

    return (font_name, font_styles, nerdfont)


def store_fonts(dest: Path, source: Path):
    dest.mkdir(parents=True, exist_ok=True)
    for font in filter(lambda f: f.is_file(), source.glob("*.ttf")):
        shutil.move(str(source / font), dest / font.name)
    print(f"Fonts installed to {dest}", file=sys.stderr)

    subprocess.run(["fc-cache", "--force"]).check_returncode()
    print("Fonts re-cached", file=sys.stderr)


if __name__ == "__main__":
    config_dir = Path(xdg_config_home) / "iosevka"
    cache_dir = Path(xdg_cache_home)
    install_dir = cache_dir / "iosevka"
    font_dir = Path(xdg_data_home) / "fonts"

    install_iosevka(install_dir)
    print(f"Loading font configurations in {config_dir}", file=sys.stderr)
    for conf in filter(
        lambda p: p.suffix in {".ini", ".toml"},
        Path(config_dir).glob("*"),
    ):
        print(f"Found {conf.stem}", file=sys.stderr)

        if conf.suffix == ".ini":
            name, styles, nerdfont_opts = parse_config(conf)
            generate_font_plan(install_dir, name, styles)
        else:
            name, styles, nerdfont_opts = conf.stem, {}, None
            shutil.copy(conf, install_dir / "private-build-plans.toml")

        generate_font(install_dir, name)
        gen_dir = install_dir / "dist" / name / "ttf"

        if nerdfont_opts is not None:
            mono = any(filter(lambda o: o in styles["common"], ("sp-term", "sp-fixed")))

            nerdfont_patch(
                gen_dir, cache_dir / "nerdfont", options=nerdfont_opts, mono=mono
            )

        store_fonts(font_dir, gen_dir)
